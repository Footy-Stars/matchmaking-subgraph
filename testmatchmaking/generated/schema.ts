// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class GameMatched extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save GameMatched entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type GameMatched must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("GameMatched", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): GameMatched | null {
    return changetype<GameMatched | null>(
      store.get_in_block("GameMatched", id.toHexString())
    );
  }

  static load(id: Bytes): GameMatched | null {
    return changetype<GameMatched | null>(
      store.get("GameMatched", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get player1(): Bytes {
    let value = this.get("player1");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set player1(value: Bytes) {
    this.set("player1", Value.fromBytes(value));
  }

  get player2(): Bytes {
    let value = this.get("player2");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set player2(value: Bytes) {
    this.set("player2", Value.fromBytes(value));
  }

  get matchDetail1_player1(): Bytes {
    let value = this.get("matchDetail1_player1");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set matchDetail1_player1(value: Bytes) {
    this.set("matchDetail1_player1", Value.fromBytes(value));
  }

  get matchDetail1_player2(): Bytes {
    let value = this.get("matchDetail1_player2");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set matchDetail1_player2(value: Bytes) {
    this.set("matchDetail1_player2", Value.fromBytes(value));
  }

  get matchDetail1_wager(): BigInt {
    let value = this.get("matchDetail1_wager");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set matchDetail1_wager(value: BigInt) {
    this.set("matchDetail1_wager", Value.fromBigInt(value));
  }

  get matchDetail1_status(): i32 {
    let value = this.get("matchDetail1_status");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set matchDetail1_status(value: i32) {
    this.set("matchDetail1_status", Value.fromI32(value));
  }

  get matchDetail1_matchWith(): BigInt {
    let value = this.get("matchDetail1_matchWith");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set matchDetail1_matchWith(value: BigInt) {
    this.set("matchDetail1_matchWith", Value.fromBigInt(value));
  }

  get matchDetail1_winner(): Bytes {
    let value = this.get("matchDetail1_winner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set matchDetail1_winner(value: Bytes) {
    this.set("matchDetail1_winner", Value.fromBytes(value));
  }

  get matchDetail1_winningWager(): BigInt {
    let value = this.get("matchDetail1_winningWager");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set matchDetail1_winningWager(value: BigInt) {
    this.set("matchDetail1_winningWager", Value.fromBigInt(value));
  }

  get matchDetail1_is_draw(): boolean {
    let value = this.get("matchDetail1_is_draw");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set matchDetail1_is_draw(value: boolean) {
    this.set("matchDetail1_is_draw", Value.fromBoolean(value));
  }

  get matchDetail2_player1(): Bytes {
    let value = this.get("matchDetail2_player1");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set matchDetail2_player1(value: Bytes) {
    this.set("matchDetail2_player1", Value.fromBytes(value));
  }

  get matchDetail2_player2(): Bytes {
    let value = this.get("matchDetail2_player2");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set matchDetail2_player2(value: Bytes) {
    this.set("matchDetail2_player2", Value.fromBytes(value));
  }

  get matchDetail2_wager(): BigInt {
    let value = this.get("matchDetail2_wager");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set matchDetail2_wager(value: BigInt) {
    this.set("matchDetail2_wager", Value.fromBigInt(value));
  }

  get matchDetail2_status(): i32 {
    let value = this.get("matchDetail2_status");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set matchDetail2_status(value: i32) {
    this.set("matchDetail2_status", Value.fromI32(value));
  }

  get matchDetail2_matchWith(): BigInt {
    let value = this.get("matchDetail2_matchWith");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set matchDetail2_matchWith(value: BigInt) {
    this.set("matchDetail2_matchWith", Value.fromBigInt(value));
  }

  get matchDetail2_winner(): Bytes {
    let value = this.get("matchDetail2_winner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set matchDetail2_winner(value: Bytes) {
    this.set("matchDetail2_winner", Value.fromBytes(value));
  }

  get matchDetail2_winningWager(): BigInt {
    let value = this.get("matchDetail2_winningWager");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set matchDetail2_winningWager(value: BigInt) {
    this.set("matchDetail2_winningWager", Value.fromBigInt(value));
  }

  get matchDetail2_is_draw(): boolean {
    let value = this.get("matchDetail2_is_draw");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set matchDetail2_is_draw(value: boolean) {
    this.set("matchDetail2_is_draw", Value.fromBoolean(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class MatchCreated extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MatchCreated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type MatchCreated must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MatchCreated", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): MatchCreated | null {
    return changetype<MatchCreated | null>(
      store.get_in_block("MatchCreated", id.toHexString())
    );
  }

  static load(id: Bytes): MatchCreated | null {
    return changetype<MatchCreated | null>(
      store.get("MatchCreated", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get matchId(): BigInt {
    let value = this.get("matchId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set matchId(value: BigInt) {
    this.set("matchId", Value.fromBigInt(value));
  }

  get player(): Bytes {
    let value = this.get("player");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set player(value: Bytes) {
    this.set("player", Value.fromBytes(value));
  }

  get matchDetail_player1(): Bytes {
    let value = this.get("matchDetail_player1");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set matchDetail_player1(value: Bytes) {
    this.set("matchDetail_player1", Value.fromBytes(value));
  }

  get matchDetail_player2(): Bytes {
    let value = this.get("matchDetail_player2");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set matchDetail_player2(value: Bytes) {
    this.set("matchDetail_player2", Value.fromBytes(value));
  }

  get matchDetail_wager(): BigInt {
    let value = this.get("matchDetail_wager");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set matchDetail_wager(value: BigInt) {
    this.set("matchDetail_wager", Value.fromBigInt(value));
  }

  get matchDetail_status(): i32 {
    let value = this.get("matchDetail_status");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set matchDetail_status(value: i32) {
    this.set("matchDetail_status", Value.fromI32(value));
  }

  get matchDetail_matchWith(): BigInt {
    let value = this.get("matchDetail_matchWith");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set matchDetail_matchWith(value: BigInt) {
    this.set("matchDetail_matchWith", Value.fromBigInt(value));
  }

  get matchDetail_winner(): Bytes {
    let value = this.get("matchDetail_winner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set matchDetail_winner(value: Bytes) {
    this.set("matchDetail_winner", Value.fromBytes(value));
  }

  get matchDetail_winningWager(): BigInt {
    let value = this.get("matchDetail_winningWager");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set matchDetail_winningWager(value: BigInt) {
    this.set("matchDetail_winningWager", Value.fromBigInt(value));
  }

  get matchDetail_is_draw(): boolean {
    let value = this.get("matchDetail_is_draw");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set matchDetail_is_draw(value: boolean) {
    this.set("matchDetail_is_draw", Value.fromBoolean(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class WinningResult extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save WinningResult entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type WinningResult must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("WinningResult", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): WinningResult | null {
    return changetype<WinningResult | null>(
      store.get_in_block("WinningResult", id.toHexString())
    );
  }

  static load(id: Bytes): WinningResult | null {
    return changetype<WinningResult | null>(
      store.get("WinningResult", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get MatchMaking_id(): BigInt {
    let value = this.get("MatchMaking_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set MatchMaking_id(value: BigInt) {
    this.set("MatchMaking_id", Value.fromBigInt(value));
  }

  get matchDetail_player1(): Bytes {
    let value = this.get("matchDetail_player1");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set matchDetail_player1(value: Bytes) {
    this.set("matchDetail_player1", Value.fromBytes(value));
  }

  get matchDetail_player2(): Bytes {
    let value = this.get("matchDetail_player2");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set matchDetail_player2(value: Bytes) {
    this.set("matchDetail_player2", Value.fromBytes(value));
  }

  get matchDetail_wager(): BigInt {
    let value = this.get("matchDetail_wager");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set matchDetail_wager(value: BigInt) {
    this.set("matchDetail_wager", Value.fromBigInt(value));
  }

  get matchDetail_status(): i32 {
    let value = this.get("matchDetail_status");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set matchDetail_status(value: i32) {
    this.set("matchDetail_status", Value.fromI32(value));
  }

  get matchDetail_matchWith(): BigInt {
    let value = this.get("matchDetail_matchWith");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set matchDetail_matchWith(value: BigInt) {
    this.set("matchDetail_matchWith", Value.fromBigInt(value));
  }

  get matchDetail_winner(): Bytes {
    let value = this.get("matchDetail_winner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set matchDetail_winner(value: Bytes) {
    this.set("matchDetail_winner", Value.fromBytes(value));
  }

  get matchDetail_winningWager(): BigInt {
    let value = this.get("matchDetail_winningWager");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set matchDetail_winningWager(value: BigInt) {
    this.set("matchDetail_winningWager", Value.fromBigInt(value));
  }

  get matchDetail_is_draw(): boolean {
    let value = this.get("matchDetail_is_draw");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set matchDetail_is_draw(value: boolean) {
    this.set("matchDetail_is_draw", Value.fromBoolean(value));
  }

  get wagerResult_player1(): Bytes {
    let value = this.get("wagerResult_player1");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set wagerResult_player1(value: Bytes) {
    this.set("wagerResult_player1", Value.fromBytes(value));
  }

  get wagerResult_amount1(): BigInt {
    let value = this.get("wagerResult_amount1");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set wagerResult_amount1(value: BigInt) {
    this.set("wagerResult_amount1", Value.fromBigInt(value));
  }

  get wagerResult_player2(): Bytes {
    let value = this.get("wagerResult_player2");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set wagerResult_player2(value: Bytes) {
    this.set("wagerResult_player2", Value.fromBytes(value));
  }

  get wagerResult_amount2(): BigInt {
    let value = this.get("wagerResult_amount2");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set wagerResult_amount2(value: BigInt) {
    this.set("wagerResult_amount2", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class WinningScore extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save WinningScore entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type WinningScore must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("WinningScore", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): WinningScore | null {
    return changetype<WinningScore | null>(
      store.get_in_block("WinningScore", id.toHexString())
    );
  }

  static load(id: Bytes): WinningScore | null {
    return changetype<WinningScore | null>(
      store.get("WinningScore", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get MatchMaking_id(): BigInt {
    let value = this.get("MatchMaking_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set MatchMaking_id(value: BigInt) {
    this.set("MatchMaking_id", Value.fromBigInt(value));
  }

  get winner(): Bytes {
    let value = this.get("winner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set winner(value: Bytes) {
    this.set("winner", Value.fromBytes(value));
  }

  get score1(): BigInt {
    let value = this.get("score1");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set score1(value: BigInt) {
    this.set("score1", Value.fromBigInt(value));
  }

  get score2(): BigInt {
    let value = this.get("score2");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set score2(value: BigInt) {
    this.set("score2", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class Withdraw extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Withdraw entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Withdraw must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Withdraw", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Withdraw | null {
    return changetype<Withdraw | null>(
      store.get_in_block("Withdraw", id.toHexString())
    );
  }

  static load(id: Bytes): Withdraw | null {
    return changetype<Withdraw | null>(store.get("Withdraw", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}
