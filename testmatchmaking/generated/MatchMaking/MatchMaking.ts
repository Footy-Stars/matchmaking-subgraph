// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class GameMatched extends ethereum.Event {
  get params(): GameMatched__Params {
    return new GameMatched__Params(this);
  }
}

export class GameMatched__Params {
  _event: GameMatched;

  constructor(event: GameMatched) {
    this._event = event;
  }

  get player1(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get player2(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get matchDetail1(): GameMatchedMatchDetail1Struct {
    return changetype<GameMatchedMatchDetail1Struct>(
      this._event.parameters[2].value.toTuple()
    );
  }

  get matchDetail2(): GameMatchedMatchDetail2Struct {
    return changetype<GameMatchedMatchDetail2Struct>(
      this._event.parameters[3].value.toTuple()
    );
  }
}

export class GameMatchedMatchDetail1Struct extends ethereum.Tuple {
  get player1(): Address {
    return this[0].toAddress();
  }

  get player2(): Address {
    return this[1].toAddress();
  }

  get wager(): BigInt {
    return this[2].toBigInt();
  }

  get status(): i32 {
    return this[3].toI32();
  }

  get matchWith(): BigInt {
    return this[4].toBigInt();
  }

  get winner(): Address {
    return this[5].toAddress();
  }

  get winningWager(): BigInt {
    return this[6].toBigInt();
  }

  get is_draw(): boolean {
    return this[7].toBoolean();
  }
}

export class GameMatchedMatchDetail2Struct extends ethereum.Tuple {
  get player1(): Address {
    return this[0].toAddress();
  }

  get player2(): Address {
    return this[1].toAddress();
  }

  get wager(): BigInt {
    return this[2].toBigInt();
  }

  get status(): i32 {
    return this[3].toI32();
  }

  get matchWith(): BigInt {
    return this[4].toBigInt();
  }

  get winner(): Address {
    return this[5].toAddress();
  }

  get winningWager(): BigInt {
    return this[6].toBigInt();
  }

  get is_draw(): boolean {
    return this[7].toBoolean();
  }
}

export class MatchCreated extends ethereum.Event {
  get params(): MatchCreated__Params {
    return new MatchCreated__Params(this);
  }
}

export class MatchCreated__Params {
  _event: MatchCreated;

  constructor(event: MatchCreated) {
    this._event = event;
  }

  get matchId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get player(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get matchDetail(): MatchCreatedMatchDetailStruct {
    return changetype<MatchCreatedMatchDetailStruct>(
      this._event.parameters[2].value.toTuple()
    );
  }
}

export class MatchCreatedMatchDetailStruct extends ethereum.Tuple {
  get player1(): Address {
    return this[0].toAddress();
  }

  get player2(): Address {
    return this[1].toAddress();
  }

  get wager(): BigInt {
    return this[2].toBigInt();
  }

  get status(): i32 {
    return this[3].toI32();
  }

  get matchWith(): BigInt {
    return this[4].toBigInt();
  }

  get winner(): Address {
    return this[5].toAddress();
  }

  get winningWager(): BigInt {
    return this[6].toBigInt();
  }

  get is_draw(): boolean {
    return this[7].toBoolean();
  }
}

export class WinningResult extends ethereum.Event {
  get params(): WinningResult__Params {
    return new WinningResult__Params(this);
  }
}

export class WinningResult__Params {
  _event: WinningResult;

  constructor(event: WinningResult) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get matchDetail(): WinningResultMatchDetailStruct {
    return changetype<WinningResultMatchDetailStruct>(
      this._event.parameters[1].value.toTuple()
    );
  }

  get wagerResult(): WinningResultWagerResultStruct {
    return changetype<WinningResultWagerResultStruct>(
      this._event.parameters[2].value.toTuple()
    );
  }
}

export class WinningResultMatchDetailStruct extends ethereum.Tuple {
  get player1(): Address {
    return this[0].toAddress();
  }

  get player2(): Address {
    return this[1].toAddress();
  }

  get wager(): BigInt {
    return this[2].toBigInt();
  }

  get status(): i32 {
    return this[3].toI32();
  }

  get matchWith(): BigInt {
    return this[4].toBigInt();
  }

  get winner(): Address {
    return this[5].toAddress();
  }

  get winningWager(): BigInt {
    return this[6].toBigInt();
  }

  get is_draw(): boolean {
    return this[7].toBoolean();
  }
}

export class WinningResultWagerResultStruct extends ethereum.Tuple {
  get player1(): Address {
    return this[0].toAddress();
  }

  get amount1(): BigInt {
    return this[1].toBigInt();
  }

  get player2(): Address {
    return this[2].toAddress();
  }

  get amount2(): BigInt {
    return this[3].toBigInt();
  }
}

export class WinningScore extends ethereum.Event {
  get params(): WinningScore__Params {
    return new WinningScore__Params(this);
  }
}

export class WinningScore__Params {
  _event: WinningScore;

  constructor(event: WinningScore) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get winner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get score1(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get score2(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class MatchMaking__getMatchDetailResultValue0Struct extends ethereum.Tuple {
  get player1(): Address {
    return this[0].toAddress();
  }

  get player2(): Address {
    return this[1].toAddress();
  }

  get wager(): BigInt {
    return this[2].toBigInt();
  }

  get status(): i32 {
    return this[3].toI32();
  }

  get matchWith(): BigInt {
    return this[4].toBigInt();
  }

  get winner(): Address {
    return this[5].toAddress();
  }

  get winningWager(): BigInt {
    return this[6].toBigInt();
  }

  get is_draw(): boolean {
    return this[7].toBoolean();
  }
}

export class MatchMaking__matchDetailResult {
  value0: Address;
  value1: Address;
  value2: BigInt;
  value3: i32;
  value4: BigInt;
  value5: Address;
  value6: BigInt;
  value7: boolean;

  constructor(
    value0: Address,
    value1: Address,
    value2: BigInt,
    value3: i32,
    value4: BigInt,
    value5: Address,
    value6: BigInt,
    value7: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set(
      "value3",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value3))
    );
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromAddress(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromBoolean(this.value7));
    return map;
  }

  getPlayer1(): Address {
    return this.value0;
  }

  getPlayer2(): Address {
    return this.value1;
  }

  getWager(): BigInt {
    return this.value2;
  }

  getStatus(): i32 {
    return this.value3;
  }

  getMatchWith(): BigInt {
    return this.value4;
  }

  getWinner(): Address {
    return this.value5;
  }

  getWinningWager(): BigInt {
    return this.value6;
  }

  getIs_draw(): boolean {
    return this.value7;
  }
}

export class MatchMaking__wagerResultResult {
  value0: Address;
  value1: BigInt;
  value2: Address;
  value3: BigInt;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: Address,
    value3: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getPlayer1(): Address {
    return this.value0;
  }

  getAmount1(): BigInt {
    return this.value1;
  }

  getPlayer2(): Address {
    return this.value2;
  }

  getAmount2(): BigInt {
    return this.value3;
  }
}

export class MatchMaking extends ethereum.SmartContract {
  static bind(address: Address): MatchMaking {
    return new MatchMaking("MatchMaking", address);
  }

  getMatchDetail(_id: BigInt): MatchMaking__getMatchDetailResultValue0Struct {
    let result = super.call(
      "getMatchDetail",
      "getMatchDetail(uint256):((address,address,uint256,uint8,uint256,address,uint256,bool))",
      [ethereum.Value.fromUnsignedBigInt(_id)]
    );

    return changetype<MatchMaking__getMatchDetailResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getMatchDetail(
    _id: BigInt
  ): ethereum.CallResult<MatchMaking__getMatchDetailResultValue0Struct> {
    let result = super.tryCall(
      "getMatchDetail",
      "getMatchDetail(uint256):((address,address,uint256,uint8,uint256,address,uint256,bool))",
      [ethereum.Value.fromUnsignedBigInt(_id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<MatchMaking__getMatchDetailResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getMatches(_player: Address): Array<BigInt> {
    let result = super.call("getMatches", "getMatches(address):(uint256[])", [
      ethereum.Value.fromAddress(_player)
    ]);

    return result[0].toBigIntArray();
  }

  try_getMatches(_player: Address): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getMatches",
      "getMatches(address):(uint256[])",
      [ethereum.Value.fromAddress(_player)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  matchDetail(param0: BigInt): MatchMaking__matchDetailResult {
    let result = super.call(
      "matchDetail",
      "matchDetail(uint256):(address,address,uint256,uint8,uint256,address,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new MatchMaking__matchDetailResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toI32(),
      result[4].toBigInt(),
      result[5].toAddress(),
      result[6].toBigInt(),
      result[7].toBoolean()
    );
  }

  try_matchDetail(
    param0: BigInt
  ): ethereum.CallResult<MatchMaking__matchDetailResult> {
    let result = super.tryCall(
      "matchDetail",
      "matchDetail(uint256):(address,address,uint256,uint8,uint256,address,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MatchMaking__matchDetailResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toI32(),
        value[4].toBigInt(),
        value[5].toAddress(),
        value[6].toBigInt(),
        value[7].toBoolean()
      )
    );
  }

  matchId(): BigInt {
    let result = super.call("matchId", "matchId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_matchId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("matchId", "matchId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  myMatches(param0: Address, param1: BigInt): BigInt {
    let result = super.call(
      "myMatches",
      "myMatches(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_myMatches(param0: Address, param1: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "myMatches",
      "myMatches(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  wagerPayoffRate(param0: BigInt): BigInt {
    let result = super.call(
      "wagerPayoffRate",
      "wagerPayoffRate(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_wagerPayoffRate(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "wagerPayoffRate",
      "wagerPayoffRate(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  wagerResult(param0: BigInt, param1: BigInt): MatchMaking__wagerResultResult {
    let result = super.call(
      "wagerResult",
      "wagerResult(uint256,uint256):(address,uint256,address,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new MatchMaking__wagerResultResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toAddress(),
      result[3].toBigInt()
    );
  }

  try_wagerResult(
    param0: BigInt,
    param1: BigInt
  ): ethereum.CallResult<MatchMaking__wagerResultResult> {
    let result = super.tryCall(
      "wagerResult",
      "wagerResult(uint256,uint256):(address,uint256,address,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MatchMaking__wagerResultResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toAddress(),
        value[3].toBigInt()
      )
    );
  }

  waitingMatchId(): BigInt {
    let result = super.call("waitingMatchId", "waitingMatchId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_waitingMatchId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "waitingMatchId",
      "waitingMatchId():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class FinishMatchCall extends ethereum.Call {
  get inputs(): FinishMatchCall__Inputs {
    return new FinishMatchCall__Inputs(this);
  }

  get outputs(): FinishMatchCall__Outputs {
    return new FinishMatchCall__Outputs(this);
  }
}

export class FinishMatchCall__Inputs {
  _call: FinishMatchCall;

  constructor(call: FinishMatchCall) {
    this._call = call;
  }

  get _id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _winner(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _score1(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _score2(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class FinishMatchCall__Outputs {
  _call: FinishMatchCall;

  constructor(call: FinishMatchCall) {
    this._call = call;
  }
}

export class QuickMatchCall extends ethereum.Call {
  get inputs(): QuickMatchCall__Inputs {
    return new QuickMatchCall__Inputs(this);
  }

  get outputs(): QuickMatchCall__Outputs {
    return new QuickMatchCall__Outputs(this);
  }
}

export class QuickMatchCall__Inputs {
  _call: QuickMatchCall;

  constructor(call: QuickMatchCall) {
    this._call = call;
  }
}

export class QuickMatchCall__Outputs {
  _call: QuickMatchCall;

  constructor(call: QuickMatchCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
